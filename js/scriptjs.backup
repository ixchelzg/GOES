//image_name = "<?php echo $ruta_completa; ?>";
      image_type = "jpg";                   //"gif" or "jpg" or whatever your browser can display
      images_names = <?php echo json_encode($images); ?>;

      first_image_name = 0;     //Representa el nombre de la primer imagen
      first_image = 0;                      //first image number
      last_image ="<?php echo $row_imagenes[0]-1; ?>";      //Representa el numero total de imagenes-1. Esto es, si last_image es 4 entonces en total son 5 imagenes
      speed_text = 0;
      var inicioPlayfwd = false;    //Controla la animacion si esta en play o en stop
      var inicioPlayBkw = false;    //Controla la animacion cuando esta en reversa

         //!!! the size is very important - if incorrect, browser tries to
         //!!! resize the images and slows down significantly
      animation_height = 680;              //height of the images in the animation
      animation_width = 480;               //width of the images in the animation
      //
      //=== THE CODE STARTS HERE - no need to change anything below ===
      //=== global variables ====
      theImages = new Array();
      normal_delay = 1000;
      delay = normal_delay;  //delay between frames in 1/100 seconds
      delay_step = 10;
      delay_max = 30000;
      delay_min = 1;
      current_image = first_image;     //number of the current image
      timeID = null;
      status = 1;            // 0-stopped, 1-playing
      play_mode = 1;         // 0-normal, 1-loop, 2-swing
      size_valid = 0;
      var loadCount = 1;
      var last_image_;

      //the canvas
      // Testing wether the current browser supports the canvas element:
      var supportCanvas = 'getContext' in document.createElement('canvas');
      if(!supportCanvas){ 
        //make page redirect ?
      }

      myCanvas = document.getElementById('animation');
      canvasContext = myCanvas.getContext('2d');

      /*var logo = new Image();
      logo.onload = function() {
        //canvasContext.drawImage(logo, 0, 0);  
      }
      logo.src = "logo.png";*/

      //===> makes sure the first image number is not bigger than the last image number
      if (first_image > last_image)
      {
         var help = last_image;
         last_image = first_image;
         first_image = help;
      };

      function draw_slide(image){
        /*myCanvas.width = image.width;
        myCanvas.height = image.height;
        canvasContext.imageSmoothingEnabled = false;
        console.log(image.width);
        canvasContext.drawImage(image, 0, 0, image.width, image.height, 0, 0, image.width, image.height);*/
        if(image){
          console.log(image.src);
          canvasContext.clearRect(0, 0, 680,480);
          canvasContext.drawImage(image,0,0,image.width, image.height,0,0,680,480);
        }
        
        
        /*var centerX = 580+49;
        var centerY = 380+49;
        var radius = 45;
        canvasContext.beginPath();
        canvasContext.arc(centerX, centerY, radius, 0, 2 * Math.PI, false);
        canvasContext.fillStyle = 'white';
        canvasContext.fill();
        canvasContext.lineWidth = 5;
        canvasContext.strokeStyle = '#ffffff';
        canvasContext.stroke();
        canvasContext.drawImage(logo,580,380,100,100);*/

      }

      //===> displays image depending on the play mode in forward direction
      function animate_fwd()
      {
         current_image++;   
         if(current_image > last_image)
         {
            if (play_mode == 0)
            {
               current_image = last_image;
               status=0;
               return;
            };                           //NORMAL
            if (play_mode == 1)
            {
               current_image = first_image; //LOOP
            };      
         };   
         //document.animation.src = theImages[current_image].src;
         // Drawing the default version of the image on the canvas:
         draw_slide(theImages[current_image]);
         document.control_form.frame_nr.value = current_image;
         timeID = setTimeout("animate_fwd()", delay);
         //window.alert("Estoy en animate_fwd el ID es:"+timeID);  
      }

      //===> displays image depending on the play mode in reverse direction
      function animate_rev()
      {
         current_image--;
         if(current_image < first_image)
         {
            if (play_mode == 0)
            {
               current_image = first_image;
               status=0;
               return;
            };                           //NORMAL
            if (play_mode == 1)
            {
               current_image = last_image; //LOOP
            };      
         };   
         //document.animation.src = theImages[current_image].src;
         draw_slide(theImages[current_image]);
         document.control_form.frame_nr.value = current_image;
         timeID = setTimeout("animate_rev()", delay);
         //window.alert("Estoy en animate_bkw el ID es:"+timeID);        
      }

      //===> changes playing speed by adding to or substracting from the delay between frames
      function change_speed(dv)
      {
         if(dv<0)//Esta alreves porque se esta dividiendo el valor  mientras mas grande tons mas chico y asi
             speed_text++;
         else
             speed_text--;
         document.control_form.speed.value = speed_text;
         
         delay+=dv;
         if(delay > delay_max) delay = delay_max;
         if(delay < delay_min) delay = delay_min;
      }

      //===> stop the movie
      function stop()
      {       
         //window.alert("Estoy en stop borrando el ID:"+timeID);
         clearTimeout(timeID);          
         status = 0;
      }

      //===> "play forward"
      function fwd()
      {
         stop();
         status = 1;
         animate_fwd();
      }

      //===> jumps to a given image number
      function go2image(number)
      {
         stop();
         //window.alert(number);
         if (number > last_image){
             number = first_image;
         }
         if (number < first_image){
             number = last_image;
         }
         current_image = number;
         //document.animation.src = theImages[current_image].src;
         draw_slide(theImages[current_image]);
         document.control_form.frame_nr.value = current_image;
      }

      //===> "play reverse"
      function rev()
      {
         stop();
         status = 1;
         animate_rev();
      }

      //===> changes play mode (normal, loop, swing)
      function change_mode(mode)
      {
         play_mode = mode;
      }

      var terminoDeCargar = false;
      var ultimaImagenCargada = 0;

      function initImages(){
        console.log(images_names);
        for (var i = 0; i <= last_image; i++){  

              theImages[i] = new Image();
              
              theImages[i].src = images_names[i];
              theImages[i].onload = imagesloaded;
                 
              current_image=i;
              //document.animation.src = theImages[current_image].src;
              // Drawing the default version of the image on the canvas:
              //draw_slide(theImages[current_image]);
              document.control_form.frame_nr.value = current_image;
              
        }
      }

      var index = 0;
      function rmBadImageCheck (items, callback){
          var x = items.length;
          //if all items have been checked, terminate the chain (by returning) and call the callback with the new items
          if(index >= x){
              last_image_ = items.length;
              return callback(items);
          }
          var img = new Image();
          img.src = items[index].src;

          // if error, splice the item from the array, and check the next one which will be on the same index because of the splice call (that's why we don't increment index)
          img.onerror = function(){
              items.splice(index, 1);
              rmBadImageCheck(items, callback);
          }
          // if success, keep the item but increment index to point to the next item and check it
          img.onload = function(){
              index++;
              rmBadImageCheck(items, callback);
          }
      }

      var items = [/*...*/];
      //called after each image is loaded and when all images are loaded, starts the show
      function imagesloaded() {
        if (last_image === loadCount) {
          terminoDeCargar = true;
          //console.log('termino.');
          launch();
        }
        loadCount++;
      }

      function naturalCompare(a, b) {
          var ax = [], bx = [];

          a.replace(/(\d+)|(\D+)/g, function(_, $1, $2) { ax.push([$1 || Infinity, $2 || ""]) });
          b.replace(/(\d+)|(\D+)/g, function(_, $1, $2) { bx.push([$1 || Infinity, $2 || ""]) });
          
          while(ax.length && bx.length) {
              var an = ax.shift();
              var bn = bx.shift();
              var nn = (an[0] - bn[0]) || an[1].localeCompare(bn[1]);
              if(nn) return nn;
          }

          return ax.length - bx.length;
      }

      //===> sets everything once the whole page and the images are loaded (onLoad handler in <body>)
      function launch()
      {    
         if(!terminoDeCargar){
             initImages();
         } 
           // when calling rmBadImageCheck pass a callback function that accept one argument (the newItems array).
          /*rmBadImageCheck(theImages, function(newItems){
            // use that array here
            console.log(newItems);
            theImages = newItems;
            last_image = theImages.length;
            document.getElementById('lastimage').innerHTML = theImages.length;
          });*/
          document.getElementById('lastimage').innerHTML = theImages.length;
       
           fwd();   
           
           current_image = first_image;      
           // Drawing the default version of the image on the canvas:
           draw_slide(theImages[current_image]);
           //document.animation.src = theImages[current_image].src;  
        
      }